/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.aagenda.braille.gui;

import pl.aagenda.braille.model.ConfigurationManager;
import pl.aagenda.braille.model.Configuration;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JPanel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import pl.aagenda.braille.model.character.CharacterBuilder;
import pl.aagenda.braille.model.character.Dots;
import pl.aagenda.braille.gui.CharacterDisplayJPanel;
import pl.aagenda.braille.gui.ConfigurationJDialog;
import pl.aagenda.braille.gui.RowJPanel;

/**
 *
 * @author mryohan
 */
public class MainJFrame extends javax.swing.JFrame {
    private static final Logger logger = LogManager.getLogger(MainJFrame.class);
    
    private Configuration configuration = ConfigurationManager.getLastConfiguration();
    
    private List<Integer> keysPressed = new LinkedList();
    
    private CharacterBuilder cb = new CharacterBuilder();
    
    private int row = 0;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel1.add(new RowJPanel());
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Braille Simulator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor Pane"));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("Configuration");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        logger.debug("Pressed " + evt.getKeyChar() + "(" + evt.getKeyCode() + ")");
        char ch = evt.getKeyChar();
        ch = Character.toLowerCase(ch);
        
        if (ch == 10) {
            jPanel1.add(new RowJPanel());
            jPanel1.revalidate();
            jPanel1.repaint();
            row++;
        }
        
        if (ch == 8) {
            JPanel panel = (JPanel) jPanel1.getComponent(row);
            if (panel.getComponentCount() > 0) {
                panel.remove(panel.getComponentCount()-1);
                panel.revalidate();
                panel.repaint();
            } else if (row > 0) {
                jPanel1.remove(panel);
                jPanel1.revalidate();
                jPanel1.repaint();
                row--;
            }
        }
        
        if (ch == configuration.getKeyLB() ||
                ch == configuration.getKeyLM() ||
                ch == configuration.getKeyLT() ||
                ch == configuration.getKeyRB() ||
                ch == configuration.getKeyRM() ||
                ch == configuration.getKeyRT()) {
        
            keysPressed.add(Integer.valueOf(ch));

            if (configuration.getKeyLT() == ch) {
                cb.addDot(Dots.LT);
            }
            if (configuration.getKeyLM() == ch) {
                cb.addDot(Dots.LM);
            }
            if (configuration.getKeyLB() == ch) {
                cb.addDot(Dots.LB);
            }
            if (configuration.getKeyRT() == ch) {
                cb.addDot(Dots.RT);
            }
            if (configuration.getKeyRM() == ch) {
                cb.addDot(Dots.RM);
            }
            if (configuration.getKeyRB() == ch) {
                cb.addDot(Dots.RB);
            }
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        logger.debug("Released " + evt.getKeyChar() + "(" + evt.getKeyCode() + ")");
        char ch = evt.getKeyChar();
        ch = Character.toLowerCase(ch);
        
        if (ch == configuration.getKeyLB() ||
                ch == configuration.getKeyLM() ||
                ch == configuration.getKeyLT() ||
                ch == configuration.getKeyRB() ||
                ch == configuration.getKeyRM() ||
                ch == configuration.getKeyRT()) {
            keysPressed.remove(Integer.valueOf(ch));
            if (keysPressed.isEmpty()) {
                logger.debug("Setting new JPanel");
                JPanel child = new CharacterDisplayJPanel(cb.build());
                logger.debug("JPanel got " + jPanel1.getComponentCount() + " components");
                JPanel panel = (JPanel) jPanel1.getComponent(row);
                panel.add(child);
                panel.revalidate();
                panel.repaint();
                logger.debug(child);
                cb.clear();
            }
        }
    }//GEN-LAST:event_formKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new ConfigurationJDialog(null, true).setVisible(true);
        saveConfiguration();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.error(ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void saveConfiguration() {
        File f = new File("config.aag");
        try {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f));
            oos.writeObject(configuration);
            oos.close();
            logger.info("Configuration has been saved");
        } catch (IOException ex) {
            logger.error("Could not save configuration due to an exception");
            logger.error(ex);
        }
    }
}
